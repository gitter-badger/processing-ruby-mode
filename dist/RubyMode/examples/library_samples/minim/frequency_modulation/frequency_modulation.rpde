#
# frequencyModulation
# <p>
#  A simple example for doing FM (frequency modulation) using two Oscils.
# <p>
# For more information about Minim and additional features,
# visit http://code.compartmental.net/minim/
# <p>
# Author: Damien Di Fede
#

# import everything necessary to make sound.
load_library 'minim'
java_import 'ddf.minim.Minim'
java_import 'ddf.minim.ugens.Oscil'
java_import 'ddf.minim.ugens.Waves'

# setup is run once at the beginning
def setup()
  # initialize the drawing window
  size(512, 200, P3D)

  # initialize the minim and out objects
  @minim = Minim.new(self)
  @out   = @minim.get_line_out()

  # make the Oscil we will hear.
  # arguments are frequency, amplitude, and waveform
  wave = Oscil.new(200, 0.8, Waves::TRIANGLE)
  # make the Oscil we will use to modulate the frequency of wave.
  # the frequency of this Oscil will determine how quickly the
  # frequency of wave changes and the amplitude determines how much.
  # since we are using the output of fm directly to set the frequency
  # of wave, you can think of the amplitude as being expressed in Hz.
  @fm = Oscil.new(10, 2, Waves::SINE)
  # set the offset of fm so that it generates values centered around 200 Hz
  @fm.offset.setLastValue(200)
  # patch it to the frequency of wave so it controls it
  @fm.patch(wave.frequency)
  # and patch wave to the output
  wave.patch(@out)
end

# draw is run many times
def draw()
  # erase the window to black
  background(0)
  # draw using a white stroke
  stroke(255)
  # draw the waveforms
  (@out.bufferSize() - 1).times do |i|
    # find the x position of each buffer value
    x1 = map(i, 0, @out.buffer_size(), 0, width)
    x2 = map(i+1, 0, @out.buffer_size(), 0, width)
    # draw a line from one buffer position to the next for both channels
    line(x1, 50 + @out.left.get(i)*50, x2, 50 + @out.left.get(i+1)*50)
    line(x1, 150 + @out.right.get(i)*50, x2, 150 + @out.right.get(i+1)*50)
  end

  text("Modulation frequency: #{@fm.frequency.get_last_value()}", 5, 15)
  text("Modulation amplitude: #{@fm.amplitude.get_last_value()}", 5, 30)
end

# we can change the parameters of the frequency modulation Oscil
# in real-time using the mouse.
def mouse_moved()
  modulate_amount = map(mouse_y, 0, height, 220, 1)
  modulate_frequency = map(mouse_x, 0, width, 0.1, 100)

  @fm.set_frequency(modulate_frequency)
  @fm.set_amplitude(modulate_amount)
end

