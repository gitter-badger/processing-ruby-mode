#
# ASCII Video
# by Ben Fry.
#
#
# Text characters have been used to represent images since the earliest computers.
# This sketch is a simple homage that re-interprets live video as ASCII text.
# See the keyPressed function for more options, like changing the font size.
#

load_library("video")
java_import 'processing.video.Capture'

# All ASCII characters, sorted according to their visual density
LETTER_ORDER =
  " .`-_':,;^=+/\"|)\\<>)iv%xclrs{*}I?!][1taeo7zjLu" +
  "nT#JCwfy325Fp6mqSghVd4EgXPGZbYkOA&8U$@KHDBWNMR0Q";

def setup()
  size(640, 480)

  # This the default video input, see the GettingStartedCapture
  # example if it creates an error
  @video = Capture.new(self, 160, 120)

  # Start capturing the images from the camera
  @video.start()

  count = @video.width * @video.height
  #puts(count)

  @font = load_font("UniversLTStd-Light-48.vlw")
  @fontSize = 1.5

  # for the 256 levels of brightness, distribute the letters across
  # the an array of 256 elements to use for the lookup
  @letters = (0...256).map do |i|
    index = map(i, 0, 256, 0, LETTER_ORDER.length).to_i
    LETTER_ORDER[index]
  end

  # current characters for each position in the video
  @chars = Array.new(count)

  # current brightness for each point
  # set each brightness at the midpoint to start
  @bright = Array.new(count) { 128 }
end

# @Override
def captureEvent(c)
  c.read()
end


def draw()
  background(0)

  push_matrix()

  hgap = width / @video.width.to_f
  vgap = height / @video.height.to_f

  scale(max(hgap, vgap) * @fontSize)
  textFont(@font, @fontSize)

  index = 0
  @video.loadPixels()
  (1...@video.height).each do |y|
    # Move down for next line
    translate(0,  1.0 / @fontSize)

    push_matrix()
    (0...@video.width).each do |x|
      pixelColor = @video.pixels[index]
      # Faster method of calculating r, g, b than red(), green(), blue()
      r = (pixelColor >> 16) & 0xff
      g = (pixelColor >> 8) & 0xff
      b = pixelColor & 0xff

      # Another option would be to properly calculate brightness as luminance:
      # luminance = 0.3*red + 0.59*green + 0.11*blue
      # Or you could instead red + green + blue, and make the the values[] array
      # 256*3 elements long instead of just 256.
      pixelBright = max(r, g, b)

      # The 0.1 value is used to damp the changes so that letters flicker less
      diff = pixelBright - @bright[index]
      @bright[index] += diff * 0.1

      fill(pixelColor)
      num = @bright[index].to_i
      text(@letters[num], 0, 0)

      # Move to the next pixel
      index += 1

      # Move over for next character
      translate(1.0 / @fontSize, 0)
    end
    pop_matrix()
  end
  pop_matrix()

  if @cheatScreen
    #image(@video, 0, height - @video.height)
    # set() is faster than image() when drawing untransformed images
    set(0, height - @video.height, @video)
  end
end


#
# Handle key presses:
# 'c' toggles the cheat screen that shows the original image in the corner
# 'g' grabs an image and saves the frame to a tiff image
# 'f' and 'F' increase and decrease the font size
#
def keyPressed()
  case key
  when 'g'
    saveFrame()
  when 'c'
    @cheatScreen = !@cheatScreen
  when 'f'
    @fontSize *= 1.1
  when 'F'
    @fontSize *= 0.9
  end
end
